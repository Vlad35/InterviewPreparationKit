package Algorithms.BFS;

public class Graph {
    private int maxN = 10;//максимальное количесвто вершин в графе
    private int[][] mas;//матрица смежностей
    Vertex[] vertexList;//список вершин
    private int curN;//переменная-счетчик, сколько текущих вершин в графе

    private MyQueue queue = new MyQueue();

    public Graph() {
        vertexList = new Vertex[maxN];
        mas = new int[maxN][maxN];
        curN = 0;
    }
    public void addVertex(char name) {
        vertexList[curN ++] = new Vertex(name);
    }

    public void addEdge(int start,int end,int val) {
        mas[start][end] = 1;
        mas[end][start] = val;
    }

    private int check(int v) {
        for(int i = 0;i < curN;i ++) {
            if(mas[v][i] == 1 && vertexList[i].isVisited() == false) {
                return i;
            }
        }
        return -1;
    }

    public void passInWidth(int index) {
        System.out.println(vertexList[index].getName());
        vertexList[index].setVisited(true);
        queue.insert(index);

        int vertex;

        while (!queue.isEmpty()) {
            int temp = queue.remove();
            while ((vertex = check(temp)) != -1) {
                System.out.println(vertexList[vertex].getName());
                vertexList[vertex].setVisited(true);
                queue.insert(vertex);
            }
        }
        for(int i = 0;i < curN;i ++) {
            vertexList[i].setVisited(false);
        }
    }
}

