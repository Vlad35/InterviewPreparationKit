package MultiThreading.Atomics;

import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class Main {

    static AtomicInteger atomicInteger = new AtomicInteger(0);
    static int i;

    public static void main(String[] args) throws InterruptedException {
        Scanner sc = new Scanner(System.in);
        for(int i = 0;i < 10000;i ++) {
            new MyAtomicThread().start();
        }
        //Если убрать Thread.sleep то операция остается атомарной, просто не все данные успевают посчитаться,
        // и соответсвенно нам выводятся данные не конечные,
        // а в отдельном потоке переменная i все еще увеличивается до 10 тысяч.
        Thread.sleep(1000);
        System.out.println(atomicInteger.get());
    }
}
